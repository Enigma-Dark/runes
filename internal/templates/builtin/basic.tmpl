// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import {Test} from "forge-std/Test.sol";

contract {{.ContractName}} is Test {
    // Generated from Echidna reproducers
    
    // Actor addresses (adjust these to match your test setup)
    address constant USER1 = 0x0000000000000000000000000000000000010000;
    address constant USER2 = 0x0000000000000000000000000000000000020000;
    address constant USER3 = 0x0000000000000000000000000000000000030000;
    
    // TODO: Replace with your actual contract instance
    // YourContract Tester;
    
    function setUp() public {
        // TODO: Initialize your contract here
        // Tester = new YourContract();
    }
    
    {{range .ReplayGroups}}
    function {{.TestName}}() public {
        {{range $call := .TemplateCalls}}{{if $call.IsSetUpActor}}_setUpActor({{$call.ActorAddress}});
        {{end}}{{if $call.IsDelay}}_delay({{$call.DelayValue}});
        {{end}}{{if $call.IsFunctionCall}}Tester.{{$call.FunctionName}}({{$call.ParamList}});
        {{end}}{{end}}
    }
    
    {{end}}
    function _setUpActor(address actor) internal {
        vm.startPrank(actor);
        // Add any additional actor setup here if needed
    }
    
    function _delay(uint256 timeInSeconds) internal {
        vm.warp(block.timestamp + timeInSeconds);
    }
} 